// <auto-generated />
using System;
using IK.InfrastructureLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IK.InfrastructureLayer.Migrations
{
    [DbContext(typeof(IKDBContext))]
    partial class IKDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IK.CoreLayer.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("KurumID")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonelID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("KurumID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caf11183-2908-4f2b-809c-0437def494fb",
                            Email = "siteadmin@example.com",
                            EmailConfirmed = true,
                            KurumID = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "SITEADMIN@EXAMPLE.COM",
                            NormalizedUserName = "SITEADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEB5j7A6RVHJHQgn9e+VLT+qn94Y4DM13yFa4KyKr3csH9GbnL/HgBXhrBRpfvW4mlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2a66fd5-fb9b-44cb-848c-a7590c924952",
                            TwoFactorEnabled = false,
                            UserName = "siteadmin"
                        });
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.AvansTalebi", b =>
                {
                    b.Property<int>("AvansTalebiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvansTalebiID"));

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<bool>("Onaylimi")
                        .HasColumnType("bit");

                    b.Property<int>("PersonelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("TalepEdilenTutar")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AvansTalebiID");

                    b.HasIndex("PersonelID");

                    b.ToTable("AvansTalebi");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Bolum", b =>
                {
                    b.Property<int>("BolumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BolumID"));

                    b.Property<string>("BolumAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EklenmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.HasKey("BolumID");

                    b.ToTable("Bolumler");

                    b.HasData(
                        new
                        {
                            BolumID = 1,
                            BolumAdi = "İnsan Kaynakları",
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 415, DateTimeKind.Utc).AddTicks(3483),
                            KayitDurumu = 1
                        },
                        new
                        {
                            BolumID = 2,
                            BolumAdi = "Bilgi Teknolojileri",
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 415, DateTimeKind.Utc).AddTicks(3486),
                            KayitDurumu = 1
                        },
                        new
                        {
                            BolumID = 3,
                            BolumAdi = "Muhasebe",
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 415, DateTimeKind.Utc).AddTicks(3488),
                            KayitDurumu = 1
                        },
                        new
                        {
                            BolumID = 4,
                            BolumAdi = "Pazarlama",
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 415, DateTimeKind.Utc).AddTicks(3489),
                            KayitDurumu = 1
                        },
                        new
                        {
                            BolumID = 5,
                            BolumAdi = "Hukuk",
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 415, DateTimeKind.Utc).AddTicks(3490),
                            KayitDurumu = 1
                        },
                        new
                        {
                            BolumID = 6,
                            BolumAdi = "Satın Alma",
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 415, DateTimeKind.Utc).AddTicks(3492),
                            KayitDurumu = 1
                        },
                        new
                        {
                            BolumID = 7,
                            BolumAdi = "Operasyon",
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 415, DateTimeKind.Utc).AddTicks(3493),
                            KayitDurumu = 1
                        });
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Bordro", b =>
                {
                    b.Property<int>("BordroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BordroID"));

                    b.Property<decimal>("AylikMaaş")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BordroTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("EkOdeme")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<decimal>("Kesintiler")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetMaaş")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PersonelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.HasKey("BordroID");

                    b.HasIndex("PersonelID");

                    b.ToTable("Bordrolar");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.HarcamaTalebi", b =>
                {
                    b.Property<int>("HarcamaTalebiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HarcamaTalebiID"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("HarcamaTutari")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<bool>("Onaylimi")
                        .HasColumnType("bit");

                    b.Property<int>("PersonelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.HasKey("HarcamaTalebiID");

                    b.HasIndex("PersonelID");

                    b.ToTable("HarcamaTalepleri");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.IzinTalebi", b =>
                {
                    b.Property<int>("IzinTalebiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IzinTalebiID"));

                    b.Property<DateTime>("BaslangicTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("BitisTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<bool>("Onaylimi")
                        .HasColumnType("bit");

                    b.Property<int>("PersonelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.HasKey("IzinTalebiID");

                    b.HasIndex("PersonelID");

                    b.ToTable("IzinTalepleri");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Kurum", b =>
                {
                    b.Property<int>("KurumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KurumID"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("EklenmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<string>("KurumAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("PaketAktifMi")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaketBaslangicTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("PaketBitisTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PaketID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("VergiNumarasi")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("KurumID");

                    b.HasIndex("PaketID");

                    b.ToTable("Kurumlar");

                    b.HasData(
                        new
                        {
                            KurumID = 1,
                            Adres = "Henüz Belirtilmedi",
                            EklenmeTarihi = new DateTime(2025, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KayitDurumu = 1,
                            KurumAdi = "Site Admin Kurumu",
                            PaketAktifMi = true,
                            PaketBaslangicTarihi = new DateTime(2025, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaketBitisTarihi = new DateTime(2026, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaketID = 1,
                            VergiNumarasi = "0000000000"
                        });
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Paket", b =>
                {
                    b.Property<int>("PaketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaketID"));

                    b.Property<bool>("AktifMi")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EklenmeTarihi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KapasiteSayisi")
                        .HasColumnType("int");

                    b.Property<int>("KayitDurumu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("PaketAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PaketSuresi")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.HasKey("PaketID");

                    b.ToTable("Paketler");

                    b.HasData(
                        new
                        {
                            PaketID = 1,
                            AktifMi = true,
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 416, DateTimeKind.Utc).AddTicks(9823),
                            Fiyat = 199.99m,
                            KapasiteSayisi = 50,
                            KayitDurumu = 1,
                            PaketAdi = "Temel Paket",
                            PaketSuresi = 0
                        },
                        new
                        {
                            PaketID = 2,
                            AktifMi = true,
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 416, DateTimeKind.Utc).AddTicks(9826),
                            Fiyat = 399.99m,
                            KapasiteSayisi = 150,
                            KayitDurumu = 1,
                            PaketAdi = "Standart Paket",
                            PaketSuresi = 0
                        },
                        new
                        {
                            PaketID = 3,
                            AktifMi = true,
                            EklenmeTarihi = new DateTime(2025, 4, 28, 12, 56, 38, 416, DateTimeKind.Utc).AddTicks(9827),
                            Fiyat = 699.99m,
                            KapasiteSayisi = 300,
                            KayitDurumu = 1,
                            PaketAdi = "Premium Paket",
                            PaketSuresi = 0
                        });
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Personel", b =>
                {
                    b.Property<int>("PersonelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelID"));

                    b.Property<int>("BolumID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EklenmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("KayitDurumu")
                        .HasColumnType("int");

                    b.Property<int?>("KullaniciHesabiID")
                        .HasColumnType("int");

                    b.Property<int>("KurumID")
                        .HasColumnType("int");

                    b.Property<string>("PersonelAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonelSoyadi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SilmeTarihi")
                        .HasColumnType("smalldatetime");

                    b.HasKey("PersonelID");

                    b.HasIndex("BolumID");

                    b.HasIndex("KullaniciHesabiID")
                        .IsUnique()
                        .HasFilter("[KullaniciHesabiID] IS NOT NULL");

                    b.HasIndex("KurumID");

                    b.ToTable("Personeller");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "31df8fa8-f289-4269-b6da-f5f8e9c93b9c",
                            Name = "SiteAdmin",
                            NormalizedName = "SITEADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "f1207dc8-3d33-4ac5-8bf5-0cdb7c4749be",
                            Name = "KurumAdmin",
                            NormalizedName = "KURUMADMIN"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "cb511a63-b52b-4955-a3ec-5e59c1ffa113",
                            Name = "Personel",
                            NormalizedName = "PERSONEL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.ApplicationUser", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.Kurum", "Kurum")
                        .WithMany("KullaniciHesaplari")
                        .HasForeignKey("KurumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Kurum");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.AvansTalebi", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.Personel", "Personel")
                        .WithMany("AvansTalepleri")
                        .HasForeignKey("PersonelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Bordro", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.Personel", "Personel")
                        .WithMany("Bordrolar")
                        .HasForeignKey("PersonelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.HarcamaTalebi", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.Personel", "Personel")
                        .WithMany("HarcamaTalepleri")
                        .HasForeignKey("PersonelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.IzinTalebi", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.Personel", "Personel")
                        .WithMany("IzinTalepleri")
                        .HasForeignKey("PersonelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Kurum", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.Paket", "Paket")
                        .WithMany("Kurumlar")
                        .HasForeignKey("PaketID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Paket");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Personel", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.Bolum", "Bolum")
                        .WithMany("Personeller")
                        .HasForeignKey("BolumID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IK.CoreLayer.Entities.ApplicationUser", "KullaniciHesabi")
                        .WithOne("Personel")
                        .HasForeignKey("IK.CoreLayer.Entities.Personel", "KullaniciHesabiID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IK.CoreLayer.Entities.Kurum", "Kurum")
                        .WithMany("Personeller")
                        .HasForeignKey("KurumID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bolum");

                    b.Navigation("KullaniciHesabi");

                    b.Navigation("Kurum");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IK.CoreLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("IK.CoreLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Personel");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Bolum", b =>
                {
                    b.Navigation("Personeller");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Kurum", b =>
                {
                    b.Navigation("KullaniciHesaplari");

                    b.Navigation("Personeller");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Paket", b =>
                {
                    b.Navigation("Kurumlar");
                });

            modelBuilder.Entity("IK.CoreLayer.Entities.Personel", b =>
                {
                    b.Navigation("AvansTalepleri");

                    b.Navigation("Bordrolar");

                    b.Navigation("HarcamaTalepleri");

                    b.Navigation("IzinTalepleri");
                });
#pragma warning restore 612, 618
        }
    }
}
